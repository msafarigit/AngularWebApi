{"version":3,"sources":["webpack:///../src/views/security/user/userInfo.view.html","webpack:///../src/views/security/user/userSearch.view.html","webpack:///../src/views/security/security.module.ts","webpack:///../src/views/security/security.router.ts","webpack:///../src/views/security/user/user.model.ts","webpack:///../src/views/security/user/userInfo.component.ts","webpack:///../src/views/security/user/userSearch.component.ts"],"names":[],"mappings":"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","file":"views-security-security-module.js","sourcesContent":["module.exports = \"<form [formGroup]=\\\"User.formGroup\\\">\\r\\n    Name: <input [(ngModel)]=\\\"User.Name\\\" formControlName=\\\"NameControl\\\" />\\r\\n    <br />\\r\\n    Username <input [(ngModel)]=\\\"User.Username\\\" formControlName=\\\"UsernameControl\\\" />\\r\\n    <br />\\r\\n    Password: <input [(ngModel)]=\\\"User.Password\\\" formControlName=\\\"PasswordControl\\\" />\\r\\n    <br />\\r\\n    <!--XXX: <input [(ngModel)]=\\\"User.Password\\\" [ngModelOptions]=\\\"{standalone: true}\\\" />\\r\\n    <br />-->\\r\\n    <input type=\\\"button\\\" (click)=\\\"Add()\\\" value=\\\"Add user\\\" [disabled]=\\\"!User.formGroup.valid\\\" />\\r\\n    {{User.Username}}\\r\\n</form>\\r\\n\\r\\n<div *ngIf=\\\"User.formGroup.dirty\\\"\\r\\n     [hidden]=\\\"!User.formGroup.controls['NameControl'].hasError('required')\\\">User.Name is required</div>\\r\\n<br />\\r\\n<div *ngIf=\\\"User.formGroup.dirty\\\"\\r\\n     [hidden]=\\\"!User.formGroup.controls['PasswordControl'].hasError('required')\\\">User.Password is required</div>\\r\\n<div *ngIf=\\\"User.formGroup.dirty\\\"\\r\\n     [hidden]=\\\"!User.formGroup.controls['PasswordControl'].hasError('pattern')\\\">User.Password pattern is invalid</div>\\r\\n<br />\"","module.exports = \"<div >\\r\\n    <a [routerLink]=\\\"['Add']\\\">کاربر جدید</a>\\r\\n</div>\\r\\n<table>\\r\\n    <thead>\\r\\n        <tr>\\r\\n            <th>Name</th>\\r\\n            <th>Username</th>\\r\\n            <th>Password</th>\\r\\n        </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n        <tr *ngFor=\\\"let user of UserList\\\">\\r\\n            <td>{{user.Name}}</td>\\r\\n            <td>{{user.Username}}</td>\\r\\n            <td>{{user.Password}}</td>\\r\\n        </tr>\\r\\n    </tbody>\\r\\n</table>\"","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SecurityRoute } from './security.router';\r\nimport { UserSearchComponent } from './user/userSearch.component';\r\nimport { UserInfoComponent } from './user/userInfo.component';\r\n\r\n@NgModule({\r\n    declarations:[\r\n        UserSearchComponent,\r\n        UserInfoComponent\r\n    ],\r\n    imports:[\r\n        RouterModule.forChild(SecurityRoute),\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    providers:[],\r\n    bootstrap:[UserSearchComponent]\r\n})\r\n\r\nexport class SecurityModule { }\r\n\r\n//Angular's own BrowserModule exports a couple of NgModules like this:\r\n//  exports: [CommonModule, ApplicationModule]\r\n\r\n//CommonModule ngmodule: Exports all the basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on.Re - exported by BrowserModule, \r\n//  which is included automatically in the root AppModule when you create a new app with the CLI new command.\r\n\r\n//ApplicationModule ngmodule: Configures the root injector for an app with providers of @angular/core dependencies that ApplicationRef needs to bootstrap components.\r\n\r\n//FormsModule ngmodule: Exports the required providers and directives for template - driven forms, making them available for import by NgModules that import this module.\r\n//  such as: NgForm directive, NgModel directive, RequiredValidator directive\r\n//  RequiredValidator: A directive that adds the required validator to any controls marked with the required attribute.The directive is provided with the NG_VALIDATORS multi - provider list.\r\n\r\n//ReactiveFormsModule ngmodule: Exports the required infrastructure and directives for reactive forms, making them available for import by NgModules that import this module.\r\n//  such as: FormBuilder provider, FormControlName directive, FormGroup directive: Binds an existing FormGroup to a DOM element.\r\n\r\n","import { Routes } from '@angular/router';\r\nimport { UserSearchComponent } from './user/userSearch.component';\r\nimport { UserInfoComponent } from './user/userInfo.component';\r\n\r\nexport const SecurityRoute : Routes = [\r\n    { path: '', component: UserSearchComponent },\r\n    { path: 'Add', component: UserInfoComponent }\r\n]","import { NgForm, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\n\r\nexport class UserModel {\r\n    Name: string = \"\";\r\n    Username: string = \"\";\r\n    Password: string = null;\r\n\r\n    //validation\r\n    formGroup: FormGroup = null;\r\n\r\n    constructor() {\r\n        var _builder = new FormBuilder();\r\n        this.formGroup = _builder.group({});\r\n\r\n        this.formGroup.addControl(\"NameControl\", new FormControl('', Validators.required));\r\n        this.formGroup.addControl(\"UsernameControl\", new FormControl('', Validators.compose([\r\n            Validators.required,\r\n            Validators.pattern(\"^[a-z|A-Z]{4,9}$\")\r\n        ])));\r\n\r\n        var passVaildators = [];\r\n        passVaildators.push(Validators.required, Validators.pattern(\"^[0-9]{4}$\"));\r\n        this.formGroup.addControl(\"PasswordControl\", new FormControl('', Validators.compose(passVaildators)));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//NgForm directive: Creates a top-level FormGroup instance and binds it to a form to track aggregate form value and validation status.\r\n//FormBuilder class: The FormBuilder provides syntactic sugar that shortens creating instances of a FormControl, FormGroup, or FormArray. It reduces the amount of boilerplate needed to build complex forms.\r\n//FormControl class: Tracks the value and validation status of an individual form control.\r\n//Validators class: Provides a set of built -in validators that can be used by form controls.\r\n//  A validator is a function that processes a FormControl or collection of controls and returns an error map or null. A null map means that validation has passed.","import { Component, OnInit } from '@angular/core';\nimport { UserModel } from './user.model';\n\n@Component({\n  templateUrl: './userInfo.view.html'\n})\n\nexport class UserInfoComponent implements OnInit {\n\n  User: UserModel = new UserModel();\n  \n  constructor() { }\n\n  ngOnInit() {\n    // this.dataService.get('Home').subscribe(data => {\n    //   console.log(data);\n    // }, error => {\n    //   console.error(error)\n    // })\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserModel } from './user.model';\r\nimport { DataService } from 'src/service/data.service';\r\n\r\n@Component({\r\n    templateUrl: \"./userSearch.view.html\"\r\n})\r\nexport class UserSearchComponent implements OnInit {\r\n    UserList: Array<UserModel> = new Array<UserModel>();\r\n\r\n    constructor(private dataService : DataService) { }\r\n\r\n\r\n    Add() {\r\n        //this.UserList.push(this.User);\r\n        //this.User = new UserModel();\r\n    }\r\n\r\n    ngOnInit() {        \r\n\r\n    }\r\n}"],"sourceRoot":""}